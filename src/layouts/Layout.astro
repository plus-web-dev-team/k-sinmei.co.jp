---
interface Props {
  title: string;
}

const { title } = Astro.props;
import "../styles/style.scss";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import Pagetop from "../components/Pagetop.astro";
const canonicalURL = new URL(Astro.url.pathname, "https://www.k-sinmei.co.jp/");
---

<!doctype html>
<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="description"
      content="株式会社SINMEIは、設立以来培ってきた技術力により、お客様の幅広いニーズにお応えして鉄骨工事業を展開しております。 技術力、品質向上に努めて、お客様の満足度を高めるべく、邁進いたします。"
    />
    <meta name="viewport" content="width=device-width" />
    <link
      rel="icon"
      type="image/svg+xml"
      href="https://www.k-sinmei.co.jp/favicon.svg"
    />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Josefin+Sans:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&family=Noto+Sans+JP:wght@100;200;300;400;500;600;700;800;900&display=swap"
      rel="stylesheet"
    />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-W8S94GNS5V"
    ></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());

      gtag("config", "G-W8S94GNS5V");
    </script>
  </head>
  <body>
    <Header />
    <slot />
    <Pagetop />
    <Footer />
    <script>
      // ハンバーガーメニューのトグル
      // 機能: ハンバーガーメニューの表示・非表示を切り替える。
      // 詳細: .gnav-hamburgerと.gnav-listのクラスにis-activeをトグルすることで、メニューの開閉を制御。
      const toggleMenu = () => {
        const gnavList = document.querySelector(".gnav-list");
        const gnavHamburger = document.querySelector(".gnav-hamburger");
        if (gnavList && gnavHamburger) {
          gnavList.classList.toggle("is-active");
          gnavHamburger.classList.toggle("is-active");
        }
      };

      // ナビゲーション背景色の変更
      // 機能: スクロール位置に応じてナビゲーションバーの背景色を変更。
      // 詳細: スクロールが60pxを超えると、背景色を半透明に変更。
      const changeNavBackground = () => {
        const nav = document.querySelector("header");
        if (nav) {
          nav.style.backgroundColor =
            window.scrollY > 60
              ? "rgba(16, 45, 142, 0.8)"
              : "rgba(16, 45, 142, 1)";
        }
      };

      // トップページの判定
      // 機能: 現在のページがトップページかどうかを判定。
      // 詳細: URLのパスが"/"かどうかをチェック。
      const isTopPage = () => {
        return window.location.pathname === "/";
      };

      // パララックス効果
      // 機能: スクロールに応じたパララックス効果を適用。
      // 詳細: スクロール量に基づいて、背景のY座標を動かす。
      const parallaxBackground = () => {
        if (isTopPage()) {
          const scrollPosition = window.scrollY * 0.08;
          const topOurMissionInner = document.querySelector(
            ".top-ourmission-inner",
          );
          if (topOurMissionInner) {
            topOurMissionInner.style.backgroundPositionY = `${-140 + scrollPosition}px`;
          }
        }
      };

      // アコーディオンメニューの制御
      // 機能: アコーディオンメニューの開閉と他の項目の自動閉鎖。
      // 詳細: アコーディオンヘッダーをクリックすると、その内容がトグルされ、他のアクティブなアコーディオンが閉じる。
      document.addEventListener("click", (event) => {
        const aboutAccordion = document.getElementById("about");
        const historyAccordion = document.getElementById("history");
        const aboutContent = aboutAccordion.querySelector(".accordion-content");
        const historyContent =
          historyAccordion.querySelector(".accordion-content");
        const companyElement = document.getElementById("company");

        // アコーディオンのヘッダーをクリックした場合
        if (event.target.closest(".accordion-header")) {
          // クリックされたアコーディオンのコンテンツがすでに開いている場合は閉じる
          if (
            event.target.closest(".accordion-item") === aboutAccordion &&
            aboutContent.classList.contains("is-active")
          ) {
            aboutContent.classList.remove("is-active");
          } else if (
            event.target.closest(".accordion-item") === historyAccordion &&
            historyContent.classList.contains("is-active")
          ) {
            historyContent.classList.remove("is-active");
          }
          // クリックされたアコーディオンのコンテンツが閉じている場合は開く
          else {
            if (event.target.closest(".accordion-item") === aboutAccordion) {
              aboutContent.classList.add("is-active");
            } else if (
              event.target.closest(".accordion-item") === historyAccordion
            ) {
              historyContent.classList.add("is-active");
            }
          }
        }
        // アコーディオンのコンテンツ以外をクリックした場合はそれぞれのアコーディオンを閉じる
        else {
          if (!aboutAccordion.contains(event.target)) {
            aboutContent.classList.remove("is-active");
          }
          if (!historyAccordion.contains(event.target)) {
            historyContent.classList.remove("is-active");
          }
          // アコーディオンのコンテンツ以外をクリックした場合はidが"company"の要素まで戻る
          if (!event.target.closest(".accordion-item")) {
            companyElement.scrollIntoView();
          }
        }
      });

      // ハンバーガーメニューのクリックイベント
      // 機能: ハンバーガーメニュークリック時にメニューを開閉。
      // 詳細: ハンバーガーアイコンにクリックイベントリスナーを追加。
      const gnavHamburger = document.querySelector(".gnav-hamburger");
      if (gnavHamburger) {
        gnavHamburger.addEventListener("click", toggleMenu);
      }

      // スクロールイベントの追加
      // 機能: スクロール時に背景色変更とパララックス効果を適用。
      // 詳細: スクロールイベントに対してそれぞれの関数を呼び出す。
      window.addEventListener("scroll", changeNavBackground);
      window.addEventListener("scroll", parallaxBackground);

      // カルーセル機能
      // 機能: カルーセルのページング制御。
      // 詳細: 次・前ボタンによりスライドの表示を制御し、現在のページ番号を表示。
      let currentPage = 1;
      const slides = document.querySelectorAll(".carousel-item");
      const totalSlides = slides.length;
      const pageSize = 9;
      const totalPages = Math.ceil(totalSlides / pageSize);
      const currentPageSpan = document.getElementById("currentPage");

      if (currentPageSpan) {
        function showSlides(startIndex) {
          slides.forEach((slide, i) => {
            slide.classList.remove("is-active");
            slide.style.display = "none";
          });

          for (let i = startIndex; i < startIndex + pageSize; i++) {
            if (slides[i]) {
              slides[i].style.display = "block";
              setTimeout(() => slides[i].classList.add("is-active"), 10);
            }
          }

          currentPageSpan.textContent = `${currentPage}`;
        }

        function nextSlide() {
          currentPage = (currentPage % totalPages) + 1;
          showSlides((currentPage - 1) * pageSize);
        }

        function prevSlide() {
          currentPage = ((currentPage - 2 + totalPages) % totalPages) + 1;
          showSlides((currentPage - 1) * pageSize);
        }

        const nextBtn = document.getElementById("nextBtn");
        if (nextBtn) {
          nextBtn.addEventListener("click", nextSlide);
        }

        const prevBtn = document.getElementById("prevBtn");
        if (prevBtn) {
          prevBtn.addEventListener("click", prevSlide);
        }

        showSlides(0);
      }

      // スクロールトップボタン
      // 機能: スクロールトップボタンの表示制御とクリック時のページトップスクロール。
      // 詳細: スクロール位置に応じてボタンを表示し、クリックでスムーズにトップへ移動。
      window.onscroll = function () {
        scrollFunction();
      };

      function scrollFunction() {
        if (
          document.body.scrollTop > 20 ||
          document.documentElement.scrollTop > 20
        ) {
          const pageTop = document.querySelector(".page-top");
          if (pageTop) {
            pageTop.style.display = "block";
          }
        } else {
          const pageTop = document.querySelector(".page-top");
          if (pageTop) {
            pageTop.style.display = "none";
          }
        }
      }

      const pageTopButton = document.querySelector(".page-top");
      if (pageTopButton) {
        pageTopButton.addEventListener("click", scrollToTop);
      }

      function scrollToTop() {
        window.scrollTo({
          top: 0,
          behavior: "smooth",
        });
      }

      // ホバーイベントの追加
      // 機能: マウスホバーイベントの追加。
      // 詳細: ホバー可能なデバイスかどうかをチェックし、該当する要素にホバーイベントを追加。
      function hasMouseSupport() {
        return (
          matchMedia("(hover: hover)").matches ||
          matchMedia("(hover: hover)").media === "not all"
        );
      }

      function addHoverEvent() {
        var elements = document.querySelectorAll(".element");

        elements.forEach(function (element) {
          element.addEventListener("mouseenter", function () {
            this.classList.add("hovered");
          });

          element.addEventListener("mouseleave", function () {
            this.classList.remove("hovered");
          });
        });
      }

      if (hasMouseSupport()) {
        addHoverEvent();
      }
    </script>
  </body>
</html>
